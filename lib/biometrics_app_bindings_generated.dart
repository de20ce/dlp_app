// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/biometrics_app.h`.
///
class BiometricsAppBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  BiometricsAppBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  BiometricsAppBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// Function to initialize the native context
  int initialize() {
    return _initialize();
  }

  late final _initializePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('initialize');
  late final _initialize = _initializePtr.asFunction<int Function()>();

  /// Function to clean up the native context
  void cleanup(
    int context,
  ) {
    return _cleanup(
      context,
    );
  }

  late final _cleanupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.IntPtr)>>('cleanup');
  late final _cleanup = _cleanupPtr.asFunction<void Function(int)>();

  /// Function to read image from binary data
  ffi.Pointer<ffi.Uint8> readImage(
    int context,
    ffi.Pointer<ffi.Uint8> imageData,
    int width,
    int height,
    int channels,
  ) {
    return _readImage(
      context,
      imageData,
      width,
      height,
      channels,
    );
  }

  late final _readImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(ffi.IntPtr, ffi.Pointer<ffi.Uint8>,
              ffi.Int, ffi.Int, ffi.Int)>>('readImage');
  late final _readImage = _readImagePtr.asFunction<
      ffi.Pointer<ffi.Uint8> Function(
          int, ffi.Pointer<ffi.Uint8>, int, int, int)>();

  /// Function to write image to binary data
  ffi.Pointer<ffi.Uint8> writeImage(
    int context,
    ffi.Pointer<ffi.Uint8> imageData,
    int width,
    int height,
    int channels,
  ) {
    return _writeImage(
      context,
      imageData,
      width,
      height,
      channels,
    );
  }

  late final _writeImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(ffi.IntPtr, ffi.Pointer<ffi.Uint8>,
              ffi.Int, ffi.Int, ffi.Int)>>('writeImage');
  late final _writeImage = _writeImagePtr.asFunction<
      ffi.Pointer<ffi.Uint8> Function(
          int, ffi.Pointer<ffi.Uint8>, int, int, int)>();

  /// Function to get the width and height of a BMP image from its header
  void getBmpDimensions(
    int context,
    ffi.Pointer<ffi.Uint8> imageData,
    ffi.Pointer<ffi.Int> width,
    ffi.Pointer<ffi.Int> height,
  ) {
    return _getBmpDimensions(
      context,
      imageData,
      width,
      height,
    );
  }

  late final _getBmpDimensionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.IntPtr, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('getBmpDimensions');
  late final _getBmpDimensions = _getBmpDimensionsPtr.asFunction<
      void Function(int, ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  /// Function to get the width and height of a JPEG image from its Exif metadata
  void getJpegDimensions(
    int context,
    ffi.Pointer<ffi.Uint8> imageData,
    ffi.Pointer<ffi.Int> width,
    ffi.Pointer<ffi.Int> height,
  ) {
    return _getJpegDimensions(
      context,
      imageData,
      width,
      height,
    );
  }

  late final _getJpegDimensionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.IntPtr,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('getJpegDimensions');
  late final _getJpegDimensions = _getJpegDimensionsPtr.asFunction<
      void Function(int, ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  /// Function to get the width and height of a PNG image from its header
  void getPngDimensions(
    int context,
    ffi.Pointer<ffi.Uint8> imageData,
    ffi.Pointer<ffi.Int> width,
    ffi.Pointer<ffi.Int> height,
  ) {
    return _getPngDimensions(
      context,
      imageData,
      width,
      height,
    );
  }

  late final _getPngDimensionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.IntPtr, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('getPngDimensions');
  late final _getPngDimensions = _getPngDimensionsPtr.asFunction<
      void Function(int, ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  /// Function to read an image file and convert it to binary data
  ffi.Pointer<ffi.Uint8> readImageToBinary(
    int context,
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _readImageToBinary(
      context,
      filename,
    );
  }

  late final _readImageToBinaryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(
              ffi.IntPtr, ffi.Pointer<ffi.Char>)>>('readImageToBinary');
  late final _readImageToBinary = _readImageToBinaryPtr.asFunction<
      ffi.Pointer<ffi.Uint8> Function(int, ffi.Pointer<ffi.Char>)>();
}
